<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://zoe-analytics.eu/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zoe-analytics.eu/" rel="alternate" type="text/html" /><updated>2018-06-28T17:45:53+02:00</updated><id>https://zoe-analytics.eu/</id><title type="html">Zoe - Analytics on demand</title><subtitle>Zoe provides a simple way to provision data analytics clusters and workflows.
</subtitle><entry><title type="html">The problem with metrics</title><link href="https://zoe-analytics.eu/blog/2018/06/28/the-metrics-problem/" rel="alternate" type="text/html" title="The problem with metrics" /><published>2018-06-28T00:00:00+02:00</published><updated>2018-06-28T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2018/06/28/the-metrics-problem</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2018/06/28/the-metrics-problem/">&lt;p&gt;Currently the Zoe deployment at Eurecom is based on a Docker-on-bare-metal configuration. We have been playing with the idea of
moving to Kubernetes on VMs, expanding our OpenStack deployment to all our servers.&lt;/p&gt;

&lt;p&gt;The biggest issue we have is recording metrics about who used which resources, when and how. The current system is based on telegraf, kafka and postgres.
Unfortunately telegraf is unable to record VM statistics (&lt;a href=&quot;https://github.com/influxdata/telegraf/issues/243&quot;&gt;Bug open since 2015&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;OpenStack comes with its own metering project, called Ceilometer. Ceilometer has recently changed its focus, dropping part of its functionality and focusing
only on gathering metrics. For storing these metrics OpenStack now proposes a new project, called Gnocchi.&lt;/p&gt;

&lt;p&gt;So basically, to go the OpenStack way, we have to rebuild our measurement pipeline around Ceilometer and Gnocchi.&lt;/p&gt;

&lt;p&gt;I dived in and tested these projects to understand how they work and their level of maturity. TL;DR is: not mature enough.&lt;/p&gt;

&lt;p&gt;Currently we have 4 compute hosts with ~15 VMs. This is a very small cloud.&lt;/p&gt;

&lt;p&gt;Ceilometer + Gnocchi managed to push the load on keystone (the authentication service) beyond horizons never seen before. A token cache can
help, but the problem is in the architecture. Each time Ceilometer wants to store some metrics, it requests a token from keystone, opens an http connection
to gnocchi and gnocchi checks the token. This is very, very wasteful. Yes, you can scale everything horizontally, but when you need to start scaling for metrics about 15 VMs, there is a problem.&lt;/p&gt;

&lt;p&gt;With caches and some scaling I managed to bring the system up and to make it more or less performant. So I started looking into the user visualization part: storing big
amounts of metrics in Gnocchi is good, but how to access it? A Grafana plugin is provided. We already use Grafana, so this is very good.&lt;br /&gt;
Unfortunately there are some issues there too. For example math between two metrics recorded at different intervals is not managed correctly, for example vm_memory_size (once per hour) divided by vm_memory_usage (once every 10 seconds) produces errors about invalid JSON.&lt;/p&gt;

&lt;p&gt;I encountered a number of other issues in Gnocchi and Grafana that make me think that they are not really used in production by anyone and that they need more time to mature. I like Gnocchi for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it uses a CEPH backend to store data: we already have CEPH and use it quite a lot, we have the tooling, the experience, etc.&lt;/li&gt;
  &lt;li&gt;it is simple to understand, especially the archive policies let you decide the amount of data you want to store with some simple calculations on a piece of paper, so yo now since the beginning how much capacity yo need to reserve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OpenStack moves fast, so hopefully these project will mature quickly. We’ll return to them in a while to check their status.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">Currently the Zoe deployment at Eurecom is based on a Docker-on-bare-metal configuration. We have been playing with the idea of moving to Kubernetes on VMs, expanding our OpenStack deployment to all our servers.</summary></entry><entry><title type="html">Users, roles and quotas</title><link href="https://zoe-analytics.eu/blog/2018/05/14/users-groups-roles/" rel="alternate" type="text/html" title="Users, roles and quotas" /><published>2018-05-14T00:00:00+02:00</published><updated>2018-05-14T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2018/05/14/users-groups-roles</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2018/05/14/users-groups-roles/">&lt;p&gt;Up to the 2017.12 version, Zoe did not have a real user management system. Authentication was delegated to a third-party service (LDAP) and Zoe retained only a user identifier to assign an owner to executions. Three groups where defined statically: guest, user and admin and everyone had to fit in one of these three groups.&lt;/p&gt;

&lt;p&gt;This simple implementation soon started to show its limits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Workspace permissions: Zoe manages workspaces, but has no idea of the UID of each user, so it has no way of telling Zoe applications under which user they should access the workspace. When the user accesses the workspace, it finds a mixture of random UIDs as owners of its files and, consequently, cannot open or delete some of them.&lt;/li&gt;
  &lt;li&gt;Limited groups meant that administrators had to fit everyone in only three categories, each with fixed permissions and quotas&lt;/li&gt;
  &lt;li&gt;Inflexible quotas defined in the source code, just for guest users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To move onward and fix all these problems, we decided to invest the time and properly develop a full user management system, with roles and quotas. This work is mostly finished in the current &lt;a href=&quot;https://github.com/DistributedSystemsGroup/zoe/tree/devel/master&quot;&gt;development master branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Zoe database now contains three more tables, called &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;quota&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;users&quot;&gt;Users&lt;/h3&gt;

&lt;p&gt;Each user that want to access a certain Zoe deployment will need to have an entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; table. This table contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the username&lt;/li&gt;
  &lt;li&gt;the authentication backend : each user can be authenticated in a different way. For example you can have staff members authenticated via LDAP, visiting researchers via the internal Zoe authentication (fast and easy to manage) and students authenticated via a text file generated by a script.&lt;/li&gt;
  &lt;li&gt;the filesystem UID to use when accessing the workspace : this UID needs to be communicated to the containers to be useful. See below how we are trying to solve this additional problem&lt;/li&gt;
  &lt;li&gt;a password : only in case the authentication back-end is internal. The password is hashed with a salt, via the &lt;a href=&quot;https://passlib.readthedocs.io/en/stable/index.html&quot;&gt;Passlib&lt;/a&gt; library.&lt;/li&gt;
  &lt;li&gt;an email for sending out notifications&lt;/li&gt;
  &lt;li&gt;… and other fields&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users can also enabled and disabled and have a quota and a role associated. As for authentication we also added PAM authentication, using the PAM subsystem of the host running the zoe_api process.&lt;/p&gt;

&lt;h3 id=&quot;quotas&quot;&gt;Quotas&lt;/h3&gt;

&lt;p&gt;A quota, once defined, can be assigned to multiple users. Quotas limit how many resources can be reserved at once by a user. For now the only limit is the number of concurrently running executions, next we will implement limits on the maximum amount of cores and memory that can be reserved.&lt;/p&gt;

&lt;h3 id=&quot;roles&quot;&gt;Roles&lt;/h3&gt;

&lt;p&gt;A role, like a quota, once defined can be assigned to multiple users. Roles define the capabilities of a user in Zoe. Currently we have the following capabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can_see_status : can access the status page on the web interface&lt;/li&gt;
  &lt;li&gt;can_change_config : can make changes to the configuration (add/delete/modify users, quotas and roles)&lt;/li&gt;
  &lt;li&gt;can_operate_others : can operate on others’ work (see and terminate other users’ executions)&lt;/li&gt;
  &lt;li&gt;can_delete_executions : can permanently delete executions and all the associated logs&lt;/li&gt;
  &lt;li&gt;can_access_api : can access the REST API&lt;/li&gt;
  &lt;li&gt;can_customize_resources : can use the web interface to modify resource reservations when starting ZApps from the shop&lt;/li&gt;
  &lt;li&gt;can_access_full_zapp_shop : has access to all ZApps in the shop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;permissions-in-containers&quot;&gt;Permissions in containers&lt;/h2&gt;

&lt;p&gt;Thanks to the new user system, Zoe knows which user/UID/GID should be used to run the processes in each container of a ZApp execution. Unfortunately most of the images available from the Docker Hub do not care at all and run the processes as root. Jupyter made an effort and runs processes with UID 1000 by default.&lt;/p&gt;

&lt;p&gt;One of the principles that Zoe always tried to adhere to has been to let users run whatever image they would like, without any change. Currently we are running standard PyTorch, Tensorflow and Jupyter images, but users complain of undeletable files in they workspace and too broad permissions, letting other users peek into one’s workspace.&lt;/p&gt;

&lt;p&gt;One solution is to make sure all processes run as root (UID 0) in containers and allow access to workspaces via per-user containers, preventing access to other workspace via container isolation. This is suboptimal for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“users running stuff as root” makes any good sysadmin cringe for very good reasons&lt;/li&gt;
  &lt;li&gt;the files in the workspace will be owned by root, also on the host systems&lt;/li&gt;
  &lt;li&gt;users will need to start a special execution for the gateway container each time they want to copy some files from/to the workspace via SFTP and they have to remember to terminate it when finished&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another solution is to create all container images from a base image that does UID management when the container is started, taking the UID from the environment variables generated by Zoe. This has its own set of problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;users are no longer able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install&lt;/code&gt; to install some random library that is not available in the image&lt;/li&gt;
  &lt;li&gt;sysadmins need to create and manage images, even when perfectly good ones are already available on the Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There isn’t a &lt;em&gt;good&lt;/em&gt; solution, it really depends on the use case. At Eurecom we are moving toward the second solution. Users access Zoe via a unified SSH gateway and we cannot have that coexist with root-owned files.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;/h2&gt;

&lt;h3 id=&quot;zapp-shop&quot;&gt;ZApp shop&lt;/h3&gt;

&lt;p&gt;We are working on a good solution for managing access to Zoe applications in the ZApp shop. Ideally an administrator would want to restrict access to some ZApps only to some users.&lt;/p&gt;

&lt;h3 id=&quot;administrator-web-interface&quot;&gt;Administrator web interface&lt;/h3&gt;

&lt;p&gt;Users, roles and quotas can be managed from the command line. A nice to have, in the future, is to have the same capability built-in the web interface.&lt;/p&gt;

&lt;h3 id=&quot;zoe-images-for-data-science-frameworks&quot;&gt;Zoe images for data science frameworks&lt;/h3&gt;

&lt;p&gt;We are slowly building a library of Docker images that understand environment variables about users and UIDs.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">Up to the 2017.12 version, Zoe did not have a real user management system. Authentication was delegated to a third-party service (LDAP) and Zoe retained only a user identifier to assign an owner to executions. Three groups where defined statically: guest, user and admin and everyone had to fit in one of these three groups.</summary></entry><entry><title type="html">Latest stable release of Zoe 2017.12</title><link href="https://zoe-analytics.eu/blog/2017/12/15/release-zoe-2017-12/" rel="alternate" type="text/html" title="Latest stable release of Zoe 2017.12" /><published>2017-12-15T00:00:00+01:00</published><updated>2017-12-15T00:00:00+01:00</updated><id>https://zoe-analytics.eu/blog/2017/12/15/release-zoe-2017-12</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2017/12/15/release-zoe-2017-12/">&lt;p&gt;We just released version 2017.12 of Zoe, the most notable changes are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New Docker Engine back-end, the Swarm back-end is now deprecated&lt;/li&gt;
  &lt;li&gt;Nodes and ZApps can be labelled for constraining execution placement, for example to run ZApps only on nodes with GPUs&lt;/li&gt;
  &lt;li&gt;Use non-reserved memory, cores, labels and image availability to take placement decisions&lt;/li&gt;
  &lt;li&gt;The elastic scheduler is considered stable, the simple scheduler is now deprecated&lt;/li&gt;
  &lt;li&gt;Zoe logs are more audit-friendly&lt;/li&gt;
  &lt;li&gt;Distinguish between reserved, allocated and in-use resources&lt;/li&gt;
  &lt;li&gt;Allocate cores automatically, respecting the minimum configured in the ZApp&lt;/li&gt;
  &lt;li&gt;Allow for more options and resource limits to be customized on the web interface (users or admins, not for guests), maximum limits are set in the zoe.conf file&lt;/li&gt;
  &lt;li&gt;Additional volumes can be mounted by specifying them in the zoe.conf file&lt;/li&gt;
  &lt;li&gt;Elastic services that die are rescheduled on a new node&lt;/li&gt;
  &lt;li&gt;Optional support for gathering usage metrics via KairosDB, for now these metrics are only used in the status page plots&lt;/li&gt;
  &lt;li&gt;More configuration options for LDAP authentication&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniele Venzano &lt;venzabrownhat.org&gt;</name></author><summary type="html">We just released version 2017.12 of Zoe, the most notable changes are:</summary></entry><entry><title type="html">Latest stable release of Zoe 2017.09</title><link href="https://zoe-analytics.eu/blog/2017/09/30/release-zoe-2017-09/" rel="alternate" type="text/html" title="Latest stable release of Zoe 2017.09" /><published>2017-09-30T00:00:00+02:00</published><updated>2017-09-30T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2017/09/30/release-zoe-2017-09</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2017/09/30/release-zoe-2017-09/">&lt;p&gt;The 2017.09 tag has been pushed and the new release is available at GitHub and GitLab! The most important changes in this release are the new web interface, the new logo and improved handling of application logs. Many more small changes and user experience improvements have been done to make this one of the smoothest releases ever.&lt;/p&gt;</content><author><name>Daniele Venzano &lt;venzabrownhat.org&gt;</name></author><summary type="html">The 2017.09 tag has been pushed and the new release is available at GitHub and GitLab! The most important changes in this release are the new web interface, the new logo and improved handling of application logs. Many more small changes and user experience improvements have been done to make this one of the smoothest releases ever.</summary></entry><entry><title type="html">We are proud to announce the latest stable release of Zoe 2017.06</title><link href="https://zoe-analytics.eu/blog/2017/06/30/release-zoe-2017-06/" rel="alternate" type="text/html" title="We are proud to announce the latest stable release of Zoe 2017.06" /><published>2017-06-30T00:00:00+02:00</published><updated>2017-06-30T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2017/06/30/release-zoe-2017-06</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2017/06/30/release-zoe-2017-06/">&lt;p&gt;The stable repository on github has been updated and you can check what’s new in the CHANGELOG file. Please note that in this version the ZApp description format has changed. We are switching to a system were each ZApp lives in its own repository: this will make it easier to build a “ZApp Shop” kind of interface. You can check new-format ZApps here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tensorflow&lt;/li&gt;
  &lt;li&gt;Jupyter&lt;/li&gt;
  &lt;li&gt;Boinc&lt;/li&gt;
  &lt;li&gt;Spark&lt;/li&gt;
  &lt;li&gt;Memcached&lt;/li&gt;
  &lt;li&gt;Many more will come…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the next release, 2017.09, that will be available at the end of September, we are already hard at work. You can follow day-to-day development on our GitLab repository: https://gitlab.eurecom.fr/zoe/main/&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">The stable repository on github has been updated and you can check what’s new in the CHANGELOG file. Please note that in this version the ZApp description format has changed. We are switching to a system were each ZApp lives in its own repository: this will make it easier to build a “ZApp Shop” kind of interface. You can check new-format ZApps here:</summary></entry><entry><title type="html">2017.03 release is now live on github!</title><link href="https://zoe-analytics.eu/blog/2017/03/31/release-zoe-2017-03/" rel="alternate" type="text/html" title="2017.03 release is now live on github!" /><published>2017-03-31T00:00:00+02:00</published><updated>2017-03-31T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2017/03/31/release-zoe-2017-03</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2017/03/31/release-zoe-2017-03/">&lt;p&gt;This release marks an important turning point for Zoe. More contributors are joining the project, merging very interesting new features. Moreover all releases are now tested through a fully automated continuous integration pipeline.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have moved to a regular, three-months release cycle. Development happens on a separate repository, join the mailing list to participate actively to the development.&lt;/li&gt;
  &lt;li&gt;Version numbers are now based on the date of the release&lt;/li&gt;
  &lt;li&gt;Kubernetes back-end: Zoe can now start ZApps on Kubernetes instead of Swarm&lt;/li&gt;
  &lt;li&gt;Deployments scripts for Linux and Windows ease the installation of Zoe&lt;/li&gt;
  &lt;li&gt;The elastic scheduler implements an advanced algorithm for optimizing resource utilization: read the paper describing the details&lt;/li&gt;
  &lt;li&gt;A preview of the new web interface based on AngularJS that will be fully developed in the next release&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">This release marks an important turning point for Zoe. More contributors are joining the project, merging very interesting new features. Moreover all releases are now tested through a fully automated continuous integration pipeline.</summary></entry><entry><title type="html">Zoe video tutorial</title><link href="https://zoe-analytics.eu/blog/2016/09/08/zoe-video-tutorial/" rel="alternate" type="text/html" title="Zoe video tutorial" /><published>2016-09-08T00:00:00+02:00</published><updated>2016-09-08T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2016/09/08/zoe-video-tutorial</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2016/09/08/zoe-video-tutorial/">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/F425824yXSc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;In this video we demonstrate Zoe by defining an interactive data exploration application based on notebooks and Spark. We start it and run code from a notebook of our Advanced Machine Learning course.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html"></summary></entry><entry><title type="html">Donating idle CPU cycles</title><link href="https://zoe-analytics.eu/blog/2016/08/24/donating-cpu-cycles/" rel="alternate" type="text/html" title="Donating idle CPU cycles" /><published>2016-08-24T00:00:00+02:00</published><updated>2016-08-24T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2016/08/24/donating-cpu-cycles</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2016/08/24/donating-cpu-cycles/">&lt;p&gt;The Zoe team is proud to announce that spare CPU cycle on our internal platform are being donated to the &lt;a href=&quot;http://www.worldcommunitygrid.org/&quot;&gt;World Community Grid&lt;/a&gt; to help supporting research into important humanitarian causes. At the bottom of this page you can see the projects we are participating to and some statistics.
To run WCG software with Zoe, we created a &lt;a href=&quot;https://gitlab.eurecom.fr/zoe-apps/zapp-boinc&quot;&gt;BOINC ZApp&lt;/a&gt;. A script monitors the platform load and starts new BOINC ZApps via Zoe when the load is low.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">The Zoe team is proud to announce that spare CPU cycle on our internal platform are being donated to the World Community Grid to help supporting research into important humanitarian causes. At the bottom of this page you can see the projects we are participating to and some statistics. To run WCG software with Zoe, we created a BOINC ZApp. A script monitors the platform load and starts new BOINC ZApps via Zoe when the load is low.</summary></entry><entry><title type="html">Zoe supports Cassandra</title><link href="https://zoe-analytics.eu/blog/2016/07/13/zoe-supports-cassandra/" rel="alternate" type="text/html" title="Zoe supports Cassandra" /><published>2016-07-13T00:00:00+02:00</published><updated>2016-07-13T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2016/07/13/zoe-supports-cassandra</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2016/07/13/zoe-supports-cassandra/">&lt;p&gt;We just pushed a Cassandra ZApp to the zoe-applications repository. It uses the standard, unmodified Docker Hub official Cassandra image, without any change.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">We just pushed a Cassandra ZApp to the zoe-applications repository. It uses the standard, unmodified Docker Hub official Cassandra image, without any change.</summary></entry><entry><title type="html">Docker images for Spark 2.0.0-preview</title><link href="https://zoe-analytics.eu/blog/2016/05/27/spark-2/" rel="alternate" type="text/html" title="Docker images for Spark 2.0.0-preview" /><published>2016-05-27T00:00:00+02:00</published><updated>2016-05-27T00:00:00+02:00</updated><id>https://zoe-analytics.eu/blog/2016/05/27/spark-2</id><content type="html" xml:base="https://zoe-analytics.eu/blog/2016/05/27/spark-2/">&lt;p&gt;Want to try Spark 2? Now that Spark 2.0.0-preview is available, we have built Docker images and used Zoe to launch a few apps (e.g. a Jupyter notebook) with Spark 2. The Dockerfiles are available in the spark2 framework in the zoe-applications repository.&lt;/p&gt;</content><author><name>Daniele Venzano</name></author><summary type="html">Want to try Spark 2? Now that Spark 2.0.0-preview is available, we have built Docker images and used Zoe to launch a few apps (e.g. a Jupyter notebook) with Spark 2. The Dockerfiles are available in the spark2 framework in the zoe-applications repository.</summary></entry></feed>